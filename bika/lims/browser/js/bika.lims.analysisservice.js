// Generated by CoffeeScript 1.12.2

/** Please use this command to compile this file into the parent `js` directory:
 *    coffee -w -o ../ -c bika.lims.analysisservice.coffee
 */


/**
 * Controller class for Analysis Service Edit view
 */

(function() {
  window.AnalysisServiceEditView = function() {
    var acalc_fd, acalc_sel, applyStyles, calc_fd, calc_sel, catchOriginalValues, defcalc_chk, insert_manual_methods, instr_chk, instr_fd, instr_sel, instre_fd, instrs_fd, instrs_ms, interim_fd, interim_rw, ldman_chk, ldman_fd, ldsel_chk, loadInterims, manual_chk, manual_fd, method_fd, method_sel, methods_fd, methods_ms, that, updateContainers, validateInstruments;
    that = this;
    manual_fd = $('#archetypes-fieldname-ManualEntryOfResults');
    manual_chk = $('#archetypes-fieldname-ManualEntryOfResults #ManualEntryOfResults');
    instre_fd = $('#archetypes-fieldname-InstrumentEntryOfResults');
    instr_chk = $('#archetypes-fieldname-InstrumentEntryOfResults #InstrumentEntryOfResults');
    methods_fd = $('#archetypes-fieldname-Methods');
    methods_ms = $('#archetypes-fieldname-Methods #Methods');
    method_fd = $('#archetypes-fieldname-_Method');
    method_sel = $('#archetypes-fieldname-_Method #_Method');
    instrs_fd = $('#archetypes-fieldname-Instruments');
    instrs_ms = $('#archetypes-fieldname-Instruments #Instruments');
    instr_fd = $('#archetypes-fieldname-Instrument');
    instr_sel = $('#archetypes-fieldname-Instrument #Instrument');
    defcalc_chk = $('#archetypes-fieldname-UseDefaultCalculation #UseDefaultCalculation');
    calc_fd = $('#archetypes-fieldname-_Calculation');
    calc_sel = $('#archetypes-fieldname-_Calculation #_Calculation');
    acalc_fd = $('#archetypes-fieldname-DeferredCalculation');
    acalc_sel = $('#archetypes-fieldname-DeferredCalculation #DeferredCalculation');
    interim_fd = $('#archetypes-fieldname-InterimFields');
    interim_rw = $('#archetypes-fieldname-InterimFields tr.records_row_InterimFields');
    ldsel_chk = $('#archetypes-fieldname-DetectionLimitSelector #DetectionLimitSelector');
    ldman_fd = $('#archetypes-fieldname-AllowManualDetectionLimit');
    ldman_chk = $('#archetypes-fieldname-AllowManualDetectionLimit #AllowManualDetectionLimit');

    /**
     * Entry-point method for AnalysisServiceEditView
     */
    insert_manual_methods = function() {
      $.ajax({
        url: window.portal_url + '/get_instrument_methods',
        type: 'POST',
        data: {
          '_authenticator': $('input[name="_authenticator"]').val(),
          'uid': $(instr_sel).val()
        },
        dataType: 'json',
        async: false
      }).done(function(data) {
        $(method_sel).find('option').remove();
        if (data !== null && data.methods.length > 0) {
          $.each(data.methods, function(index, value) {
            var option, title, uid;
            uid = value.uid;
            title = value.title;
            console.debug('Adding Method ' + title + ' to the Selection');
            option = '<option value="' + uid + '">' + title + '</option>';
            $(method_sel).append(option);
            $(method_sel).val(uid);
          });
        } else {
          $(method_sel).append('<option value=\'\'>' + _('None') + '</option>');
          $(method_sel).val('');
        }
        $(defcalc_chk).change();
      });
    };
    catchOriginalValues = function() {
      var calcuid, hidd, i, keyword, originals, request_data, rows, title, toremove, unit, value, wide;
      $(manual_chk).attr('data-default', $(manual_chk).is(':checked'));
      $(instr_chk).attr('data-default', $(instr_chk).is(':checked'));
      $(methods_ms).attr('data-default', $(methods_ms).val());
      $(method_sel).attr('data-default', $(method_sel).val());
      $(instrs_ms).attr('data-default', $(instrs_ms).val());
      $(instr_sel).attr('data-default', $(instr_sel).val());
      $(defcalc_chk).attr('data-default', $(defcalc_chk).is(':checked'));
      $(calc_sel).attr('data-default', $(calc_sel).val());
      $(acalc_sel).attr('data-default', $(acalc_sel).val());
      $(methods_ms).find('option[value=""]').remove();
      $(calc_sel).focus(function(e) {
        $(this).blur();
      });
      if ($(defcalc_chk).is(':checked')) {
        $(acalc_fd).hide();
        $(calc_fd).show();
      } else {
        $(calc_fd).hide();
        $(acalc_fd).show();
      }
      $('body').append('<input type=\'hidden\' id=\'temp_manual_interims\' value=\'[]\'>');
      rows = $('tr.records_row_InterimFields');
      originals = [];
      if ($(rows).length > 1) {
        i = $(rows).length - 2;
        while (i >= 0) {
          keyword = $($($(rows)[i]).find('td input')[0]).val();
          if (keyword !== '') {
            title = $($($(rows)[i]).find('td input')[1]).val();
            value = $($($(rows)[i]).find('td input')[2]).val();
            unit = $($($(rows)[i]).find('td input')[3]).val();
            hidd = $($($(rows)[i]).find('td input')[4]).is(':checked');
            wide = $($($(rows)[i]).find('td input')[5]).is(':checked');
            originals.push([keyword, title, value, unit, hidd, wide]);
          }
          i--;
        }
      }
      toremove = [];
      calcuid = '';
      $(calc_sel).find('option').remove();
      if ($(defcalc_chk).is(':checked')) {
        calcuid = $(calc_sel).attr('data-default');
      } else {
        calcuid = $(acalc_sel).attr('data-default');
      }
      if (calcuid !== null && calcuid !== '') {
        request_data = {
          catalog_name: 'bika_setup_catalog',
          UID: calcuid
        };
        window.bika.lims.jsonapi_read(request_data, function(data) {
          var manualinterims, row;
          if (data.objects.length > 0) {
            $(calc_sel).append('<option value="' + data.objects[0].UID + '">' + data.objects[0].Title + '</option>');
            $(calc_sel).val(data.objects[0].UID);
            i = 0;
            while (i < data.objects[0].InterimFields.length) {
              row = data.objects[0].InterimFields[i];
              toremove.push(row.keyword);
              i++;
            }
          } else {
            $(calc_sel).append('<option value="' + data + '">' + _('None') + '</option>');
            $(calc_sel).val('');
          }
          manualinterims = originals.filter(function(el) {
            return toremove.indexOf(el[0]) < 0;
          });
          $('#temp_manual_interims').val($.toJSON(manualinterims));
          $(manual_chk).change();
        });
      } else {
        $(manual_chk).change();
      }
    };

    /**
     * Loads the Interim fields Widget for the specificied calculation
     */
    loadInterims = function(calcuid) {
      var i, request_data, rows;
      $(interim_fd).hide();
      rows = void 0;
      i = void 0;
      if (calcuid === null || calcuid === '') {
        $('#InterimFields_more').click();
        rows = $('tr.records_row_InterimFields');
        if ($(rows).length > 1) {
          i = $(rows).length - 2;
          while (i >= 0) {
            $($(rows)[i]).remove();
            i--;
          }
        }
        $(interim_fd).hide();
        return;
      }
      request_data = {
        catalog_name: 'bika_setup_catalog',
        UID: calcuid
      };
      window.bika.lims.jsonapi_read(request_data, function(data) {
        var rows;
        var i;
        var i;
        var hidd, j, k, keyword, manualinterims, original, originals, row, unit, value, wide;
        rows = void 0;
        i = void 0;
        $('#InterimFields_more').click();
        rows = $('tr.records_row_InterimFields');
        originals = [];
        if ($(rows).length > 1) {
          i = $(rows).length - 2;
          while (i >= 0) {
            keyword = $($($(rows)[i]).find('td input')[0]).val();
            if (keyword !== '') {
              value = $($($(rows)[i]).find('td input')[2]).val();
              unit = $($($(rows)[i]).find('td input')[3]).val();
              hidd = $($($(rows)[i]).find('td input')[4]).is(':checked');
              wide = $($($(rows)[i]).find('td input')[5]).is(':checked');
              originals.push([keyword, value, unit, hidd, wide]);
            }
            $($(rows)[i]).remove();
            i--;
          }
        }
        if (data.objects.length > 0) {
          $(interim_fd).fadeIn('slow');
          $('[id^=\'InterimFields-keyword-\']').attr('id', 'InterimFields-keyword-0');
          $('[id^=\'InterimFields-title-\']').attr('id', 'InterimFields-title-0');
          $('[id^=\'InterimFields-value-\']').attr('id', 'InterimFields-value-0');
          $('[id^=\'InterimFields-unit-\']').attr('id', 'InterimFields-unit-0');
          i = 0;
          while (i < data.objects[0].InterimFields.length) {
            row = data.objects[0].InterimFields[i];
            original = null;
            j = 0;
            while (j < originals.length) {
              if (originals[j][0] === row.keyword) {
                original = originals[j];
                break;
              }
              j++;
            }
            $('#InterimFields-keyword-' + i).val(row.keyword);
            $('#InterimFields-title-' + i).val(row.title);
            if (original === null) {
              $('#InterimFields-value-' + i).val(row.value);
              $('#InterimFields-unit-' + i).val(row.unit);
            } else {
              $('#InterimFields-value-' + i).val(original[1]);
              $('#InterimFields-unit-' + i).val(original[2]);
            }
            $('#InterimFields_more').click();
            i++;
          }
        }
        manualinterims = $.parseJSON($('#temp_manual_interims').val());
        if (manualinterims.length > 0) {
          $(interim_fd).fadeIn('slow');
          i = $('tr.records_row_InterimFields').length - 1;
          k = 0;
          while (k < manualinterims.length) {
            $('#InterimFields-keyword-' + i).val(manualinterims[k][0]);
            $('#InterimFields-title-' + i).val(manualinterims[k][1]);
            $('#InterimFields-value-' + i).val(manualinterims[k][2]);
            $('#InterimFields-unit-' + i).val(manualinterims[k][3]);
            $('#InterimFields_more').click();
            i++;
            k++;
          }
        }
      });
    };

    /**
     * Checks if the selected instruments aren't out-of-date and their
     * latest Internal Calibration Tests are valid. If an invalid
     * instrument gets selected, shows an alert to the user
     */
    validateInstruments = function() {
      var _, insts;
      $('#invalid-instruments-alert').remove();
      if ($('#InstrumentEntryOfResults').is(':checked')) {
        window.jarn.i18n.loadCatalog('bika');
        _ = window.jarn.i18n.MessageFactory('bika');
        insts = $('#Instruments').val() ? $('#Instruments').val() : [];
        $.each(insts, function(index, value) {
          var request_data;
          request_data = {
            catalog_name: 'uid_catalog',
            UID: value
          };
          window.bika.lims.jsonapi_read(request_data, function(data) {
            var errmsg, html, instrument_path, title;
            if (data.objects[0].Valid !== '1') {
              title = data.objects[0].Title;
              instrument_path = window.location.protocol + '//' + window.location.host + data.objects[0].path;
              if ($('#invalid-instruments-alert').length > 0) {
                $('#invalid-instruments-alert dd').first().append(', ' + title);
              } else {
                errmsg = _('Some of the selected instruments are out-of-date or with failed calibration tests');
                html = '<div id=\'invalid-instruments-alert\' class=\'alert\'>' + '    <dt>' + errmsg + ':</dt>' + '    <dd> <a href=' + instrument_path + '>' + title + '</a></dd>' + '</div>';
                $('#analysisservice-base-edit').before(html);
              }
            }
          });
        });
      } else {
        loadEmptyInstrument();
      }
    };
    updateContainers = function(target, requestdata) {
      $.ajax({
        type: 'POST',
        url: window.location.href + '/getUpdatedContainers',
        data: requestdata,
        success: function(data) {
          var option;
          option = $(target).val();
          if (option === null || option === void 0) {
            option = [];
          }
          $(target).empty();
          $.each(data, function(i, v) {
            if ($.inArray(v[0], option) > -1) {
              $(target).append('<option value=\'' + v[0] + '\' selected=\'selected\'>' + v[1] + '</option>');
            } else {
              $(target).append('<option value=\'' + v[0] + '\'>' + v[1] + '</option>');
            }
          });
        },
        dataType: 'json'
      });
    };
    applyStyles = function() {
      $($(manual_fd)).after($(methods_fd));
      $(methods_fd).css('border', '1px solid #cfcfcf').css('background-color', '#efefef').css('padding', '10px').css('margin-bottom', '20px');
      $(instrs_fd).css('border', '1px solid #cfcfcf').css('border-bottom', 'none').css('background-color', '#efefef').css('padding', '10px').css('margin-bottom', '0px');
      $(instr_fd).css('border', '1px solid #cfcfcf').css('border-top', 'none').css('background-color', '#efefef').css('padding', '10px').css('margin-bottom', '20px');
      $(acalc_fd).find('label').hide();
      $(calc_fd).find('label').hide();
    };
    that.load = function() {
      var errmsg, html, i, rows, title;
      $(ldsel_chk).change(function() {
        if ($(this).is(':checked')) {
          $(ldman_fd).show();
        } else {
          $(ldman_fd).hide();
          $(ldman_chk).prop('checked', false);
        }
      });
      $(ldsel_chk).change();
      $('.portaltype-analysisservice #RequiredVolume, .portaltype-analysisservice #Separate').change(function() {
        var requestdata, separate;
        separate = $('#Separate').prop('checked');
        if (!separate) {
          $('[name=\'Preservation\\:list\']').prop('disabled', false);
        }
        requestdata = {
          'allow_blank': true,
          'show_container_types': !separate,
          'show_containers': separate,
          '_authenticator': $('input[name=\'_authenticator\']').val()
        };
        updateContainers('#Container\\:list', requestdata);
      });
      $('.portaltype-analysisservice [name^=\'PartitionSetup.separate\'],.portaltype-analysisservice [name^=\'PartitionSetup.vol\']').change(function() {
        var minvol, requestdata, separate, target;
        separate = $(this).parents('tr').find('[name^=\'PartitionSetup.separate\']').prop('checked');
        if (!separate) {
          $(this).parents('tr').find('[name^=\'PartitionSetup.preservation\']').prop('disabled', false);
        }
        minvol = $(this).parents('tr').find('[name^=\'PartitionSetup.vol\']').val();
        target = $(this).parents('tr').find('[name^=\'PartitionSetup.container\']');
        requestdata = {
          'allow_blank': true,
          'minvol': minvol,
          'show_container_types': !separate,
          'show_containers': separate,
          '_authenticator': $('input[name=\'_authenticator\']').val()
        };
        updateContainers(target, requestdata);
      });
      $('.portaltype-analysisservice [name^=\'PartitionSetup.sampletype\']').change(function() {
        var request_data, st_element;
        st_element = this;
        request_data = {
          catalog_name: 'uid_catalog',
          UID: $(this).val()
        };
        window.bika.lims.jsonapi_read(request_data, function(data) {
          var minvol, target;
          minvol = data.objects[0].MinimumVolume;
          target = $(st_element).parents('tr').find('[name^=\'PartitionSetup.vol\']');
          $(target).val(minvol);
          $(st_element).parents('tr').find('[name^=\'PartitionSetup.container\']').change();
        });
      });
      $('.portaltype-analysisservice #Container').bind('selected', function() {
        var container_uid, request_data;
        container_uid = $(this).attr('uid');
        request_data = {
          catalog_name: 'uid_catalog',
          UID: container_uid
        };
        window.bika.lims.jsonapi_read(request_data, function(data) {
          if (data.objects.length < 1 || !data.objects[0].PrePreserved || !data.objects[0].Preservation) {
            $('#Preservation').val('');
            $('#Preservation').prop('disabled', false);
          } else {
            $('#Preservation').val(data.objects[0].Preservation);
            $('#Preservation').prop('disabled', true);
          }
        });
      });
      $('.portaltype-analysisservice [name^=\'PartitionSetup.container\']').change(function() {
        var container_uid, request_data, target;
        target = $(this).parents('tr').find('[name^=\'PartitionSetup.preservation\']');
        container_uid = $(this).val();
        if (!container_uid || container_uid.length === 1 && !container_uid[0]) {
          $(target).prop('disabled', false);
          return;
        }
        container_uid = container_uid[0];
        request_data = {
          catalog_name: 'uid_catalog',
          UID: container_uid
        };
        window.bika.lims.jsonapi_read(request_data, function(data) {
          if (data.objects.length < 1 || !data.objects[0].PrePreserved || !data.objects[0].Preservation) {
            $(target).prop('disabled', false);
          } else {
            $(this).val(container_uid);
            $(target).val(data.objects[0].Preservation);
            $(target).prop('disabled', true);
          }
        });
      });
      if ($('.portaltype-analysisservice #Calculation').val() === '') {
        $('#InterimFields_more').click();
        rows = $('tr.records_row_InterimFields');
        if ($(rows).length > 1) {
          i = $(rows).length - 2;
          while (i >= 0) {
            $($(rows)[i]).remove();
            i--;
          }
        }
        $('#archetypes-fieldname-InterimFields').hide();
        return;
      }
      if ($(instrs_ms).find('option').length === 0) {
        $(manual_chk).prop('checked', true);
        $(manual_chk).prop('readonly', true);
        $(instr_chk).prop('checked', false);
        $(instr_chk).prop('readonly', true);
        errmsg = _('No instruments available');
        title = _('Instrument entry of results option not allowed');
        html = '<div id=\'no-instruments-alert\' class=\'alert\'>' + '    <dt>' + errmsg + '</dt>' + '    <dd>' + title + '</dd>' + '</div>';
        $('#analysisservice-base-edit').before(html);
      }
      $(manual_chk).change(function() {
        if ($(this).is(':checked')) {
          insert_manual_methods();
          $(methods_fd).fadeIn('slow');
          $(methods_ms).change();
        } else {
          $(methods_fd).hide();
          $(methods_ms).find('option[selected]').prop('selected', false);
          $(methods_ms).val('');
          $(methods_ms).change();
          $(instr_chk).prop('checked', true);
        }
        $(instr_chk).change();
      });
      $(instr_chk).change(function() {
        if ($(this).is(':checked')) {
          $(manual_chk).unbind('click');
          $(instrs_fd).fadeIn('slow');
          $(instrs_ms).find('option[value=""]').remove();
          $(instr_sel).find('option[value=""]').remove();
          $(instr_fd).fadeIn('slow');
          $(method_sel).focus(function(e) {
            $(this).blur();
          });
          $(calc_sel).focus(function(e) {
            $(this).blur();
          });
          $(acalc_fd).hide();
          $(instrs_ms).change();
        } else {
          $('#invalid-instruments-alert').remove();
          $(instrs_fd).hide();
          if ($(instrs_ms).find('option[value=""]').length === 0) {
            $(instrs_ms).prepend('<option value="">None</option>');
          }
          $(instrs_ms).val('');
          $(instrs_ms).find('option[value=""]').prop('selected', true);
          $(instr_fd).hide();
          if ($(instr_sel).find('option[value=""]').length === 0) {
            $(instr_sel).prepend('<option value="">None</option>');
          }
          $(instr_sel).val('');
          $(instr_sel).find('option[value=""]').prop('selected', true);
          $(manual_chk).click(function(e) {
            e.preventDefault();
          });
          $(methods_ms).change();
          $(method_sel).unbind('focus');
          if (!$(manual_chk).is(':checked')) {
            $(manual_chk).prop('checked', true);
            $(manual_chk).change();
          }
        }
      });
      $(methods_ms).change(function(e) {
        var defoption, methods, prevmethod, prevmethodtxt;
        prevmethod = $(method_sel).val();
        prevmethodtxt = $(method_sel).find('option[value="' + prevmethod + '"]').html();

        /*if ($(this).val() == null) {
            // At least one method must be selected
            $(this).val($(this).find('option').first().val());
        }
         */
        $(method_sel).find('option').remove();
        methods = $(methods_ms).val();
        if (methods !== null) {
          $.each(methods, function(index, value) {
            var option;
            option = $(methods_ms).find('option[value="' + value + '"]').clone();
            $(method_sel).append(option);
          });
        } else {
          $(method_sel).prepend('<option value="">' + _('None') + '</option>');
        }
        defoption = $(method_sel).find('option[value="' + $(method_sel).attr('data-default') + '"]');
        if (defoption === null || defoption === '') {
          defoption = $(method_sel).find('option[value="' + prevmethod + '"]');
          if (defoption === null || defoption === '') {
            defoption = $(method_sel).find('option').first();
          }
        }
        if (!$(instr_chk).is(':checked')) {
          $(method_sel).val(defoption.val());
        } else {
          if ($(method_sel).find('option[value="' + prevmethod + '"]').length === 0) {
            $(method_sel).append('<option value="' + prevmethod + '">' + prevmethodtxt + '</option>');
          }
          $(method_sel).val(prevmethod);
        }
        $(method_sel).change();
      });
      $(method_sel).change(function(e) {
        $(defcalc_chk).change();
      });
      $(instrs_ms).change(function(e) {
        var defoption, insts, previnstr;
        previnstr = $(instr_sel).val();
        if ($(this).val() === null) {
          $(this).val($(this).find('option').first().val());
        }
        $(instr_sel).find('option').remove();
        insts = $(instrs_ms).val();
        $.each(insts, function(index, value) {
          var option;
          option = $(instrs_ms).find('option[value="' + value + '"]').clone();
          $(instr_sel).append(option);
        });
        defoption = $(instr_sel).find('option[value="' + previnstr + '"]');
        if (defoption === null || defoption === '') {
          defoption = $(instr_sel).find('option[value="' + $(instr_sel).attr('data-default') + '"]');
          if (defoption === null || defoption === '') {
            defoption = $(instr_sel).find('option').first();
          }
        }
        $(instr_sel).val($(defoption).val());
        $('#invalid-instruments-alert').remove();
        $.each(insts, function(index, value) {
          var request_data;
          if (value !== '' && $(instr_chk).is(':checked')) {
            request_data = {
              catalog_name: 'uid_catalog',
              UID: value
            };
            window.bika.lims.jsonapi_read(request_data, function(data) {
              var title;
              var errmsg;
              var html;
              var instrument_path;
              if (!$(instr_chk).is(':checked')) {
                $('#invalid-instruments-alert').remove();
              } else if (data.objects[0].Valid !== '1') {
                title = data.objects[0].Title;
                instrument_path = window.location.protocol + '//' + window.location.host + data.objects[0].path;
                if ($('#invalid-instruments-alert').length > 0) {
                  $('#invalid-instruments-alert dd').first().append(', ' + title);
                } else {
                  errmsg = _('Some of the selected instruments are out-of-date or with failed calibration tests');
                  html = '<div id=\'invalid-instruments-alert\' class=\'alert\'>' + '    <dt>' + errmsg + ':</dt>' + '    <dd> <a href=' + instrument_path + '>' + title + '</a></dd>' + '</div>';
                  $('#analysisservice-base-edit').before(html);
                }
              }
            });
          }
        });
        $(instr_sel).change();
      });
      $(instr_sel).change(function() {
        $(method_sel).find('option').remove();
        $(method_sel).append('<option value=\'\'>' + _('None') + '</option>');
        $(method_sel).val('');
        $.ajax({
          url: window.portal_url + '/get_instrument_methods',
          type: 'POST',
          data: {
            '_authenticator': $('input[name="_authenticator"]').val(),
            'uid': $(instr_sel).val()
          },
          dataType: 'json',
          async: false
        }).done(function(data) {
          $(method_sel).find('option').remove();
          if (data !== null && data.methods.length > 0) {
            $.each(data.methods, function(index, value) {
              var title;
              var option, uid;
              uid = value.uid;
              title = value.title;
              console.debug('Adding Method ' + title + ' to the Selection');
              option = '<option value="' + uid + '">' + title + '</option>';
              $(method_sel).append(option);
              $(method_sel).val(uid);
            });
          } else {
            $(method_sel).append('<option value=\'\'>' + _('None') + '</option>');
            $(method_sel).val('');
          }
          $(defcalc_chk).change();
        });
      });
      $(defcalc_chk).change(function() {
        var muid;
        if ($(this).is(':checked')) {
          $(acalc_fd).hide();
          $(calc_fd).show();
          $(calc_fd).prop('disabled', true);
          muid = $(method_sel).val();
          if (muid !== null && muid !== '') {
            $.ajax({
              url: window.portal_url + '/get_method_calculation',
              type: 'POST',
              data: {
                '_authenticator': $('input[name="_authenticator"]').val(),
                'uid': muid
              },
              dataType: 'json'
            }).done(function(data) {
              $(calc_sel).find('option').remove();
              if (data !== null && data['uid']) {
                $(calc_sel).prepend('<option value="' + data['uid'] + '">' + data['title'] + '</option>');
              } else {
                $(calc_sel).append('<option value="">' + _('None') + '</option>');
              }
              $(calc_sel).val($(calc_sel).find('option').first().val());
              $(calc_sel).change();
            });
          } else {
            $(calc_sel).find('option').remove();
            $(calc_sel).append('<option value="">' + _('None') + '</option>');
            $(calc_sel).change();
          }
        } else {
          $(calc_sel).find('option').remove();
          $(calc_sel).append('<option value="">' + _('None') + '</option>');
          $(calc_sel).val('');
          $(calc_fd).hide();
          $(acalc_fd).show();
          $(acalc_sel).change();
        }
      });
      $(calc_sel).change(function() {
        loadInterims($(this).val());
      });
      $(acalc_sel).change(function() {
        loadInterims($(this).val());
      });
      applyStyles();
      catchOriginalValues();
    };
  };

}).call(this);
